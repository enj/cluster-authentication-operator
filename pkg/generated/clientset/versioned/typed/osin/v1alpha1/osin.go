// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/openshift/cluster-osin-operator/pkg/apis/osin/v1alpha1"
	scheme "github.com/openshift/cluster-osin-operator/pkg/generated/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// OsinsGetter has a method to return a OsinInterface.
// A group's client should implement this interface.
type OsinsGetter interface {
	Osins(namespace string) OsinInterface
}

// OsinInterface has methods to work with Osin resources.
type OsinInterface interface {
	Create(*v1alpha1.Osin) (*v1alpha1.Osin, error)
	Update(*v1alpha1.Osin) (*v1alpha1.Osin, error)
	UpdateStatus(*v1alpha1.Osin) (*v1alpha1.Osin, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.Osin, error)
	List(opts v1.ListOptions) (*v1alpha1.OsinList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.Osin, err error)
	OsinExpansion
}

// osins implements OsinInterface
type osins struct {
	client rest.Interface
	ns     string
}

// newOsins returns a Osins
func newOsins(c *OsinV1alpha1Client, namespace string) *osins {
	return &osins{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the osin, and returns the corresponding osin object, and an error if there is any.
func (c *osins) Get(name string, options v1.GetOptions) (result *v1alpha1.Osin, err error) {
	result = &v1alpha1.Osin{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("osins").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of Osins that match those selectors.
func (c *osins) List(opts v1.ListOptions) (result *v1alpha1.OsinList, err error) {
	result = &v1alpha1.OsinList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("osins").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested osins.
func (c *osins) Watch(opts v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("osins").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a osin and creates it.  Returns the server's representation of the osin, and an error, if there is any.
func (c *osins) Create(osin *v1alpha1.Osin) (result *v1alpha1.Osin, err error) {
	result = &v1alpha1.Osin{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("osins").
		Body(osin).
		Do().
		Into(result)
	return
}

// Update takes the representation of a osin and updates it. Returns the server's representation of the osin, and an error, if there is any.
func (c *osins) Update(osin *v1alpha1.Osin) (result *v1alpha1.Osin, err error) {
	result = &v1alpha1.Osin{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("osins").
		Name(osin.Name).
		Body(osin).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *osins) UpdateStatus(osin *v1alpha1.Osin) (result *v1alpha1.Osin, err error) {
	result = &v1alpha1.Osin{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("osins").
		Name(osin.Name).
		SubResource("status").
		Body(osin).
		Do().
		Into(result)
	return
}

// Delete takes name of the osin and deletes it. Returns an error if one occurs.
func (c *osins) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("osins").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *osins) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("osins").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched osin.
func (c *osins) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.Osin, err error) {
	result = &v1alpha1.Osin{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("osins").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
