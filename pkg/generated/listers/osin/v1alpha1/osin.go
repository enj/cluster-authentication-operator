// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/openshift/cluster-osin-operator/pkg/apis/osin/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// OsinLister helps list Osins.
type OsinLister interface {
	// List lists all Osins in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.Osin, err error)
	// Osins returns an object that can list and get Osins.
	Osins(namespace string) OsinNamespaceLister
	OsinListerExpansion
}

// osinLister implements the OsinLister interface.
type osinLister struct {
	indexer cache.Indexer
}

// NewOsinLister returns a new OsinLister.
func NewOsinLister(indexer cache.Indexer) OsinLister {
	return &osinLister{indexer: indexer}
}

// List lists all Osins in the indexer.
func (s *osinLister) List(selector labels.Selector) (ret []*v1alpha1.Osin, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Osin))
	})
	return ret, err
}

// Osins returns an object that can list and get Osins.
func (s *osinLister) Osins(namespace string) OsinNamespaceLister {
	return osinNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// OsinNamespaceLister helps list and get Osins.
type OsinNamespaceLister interface {
	// List lists all Osins in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.Osin, err error)
	// Get retrieves the Osin from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.Osin, error)
	OsinNamespaceListerExpansion
}

// osinNamespaceLister implements the OsinNamespaceLister
// interface.
type osinNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Osins in the indexer for a given namespace.
func (s osinNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Osin, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Osin))
	})
	return ret, err
}

// Get retrieves the Osin from the indexer for a given namespace and name.
func (s osinNamespaceLister) Get(name string) (*v1alpha1.Osin, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("osin"), name)
	}
	return obj.(*v1alpha1.Osin), nil
}
